
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_snowflake_pov'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'dbt_snowflake'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# Configuring vars
vars:
  step_name: Staging
  config_dict: '{"materialized": "view"}'
  # dq_tools_enable_store_test_results: true
  # dbt_test_results_to_db: true
  # dbt_dq_tool_schema: AUDIT
  # dbt_dq_tool_database: dq_tools
  # dbt_dq_tool_full_refresh: false
  # >> for test coverage
  # dbt_dq_tool_test_coverage_exclusion:
  #   by_database_fqn: []
  #   by_schema_fqn: []
  #   by_table_fqn: []
  # >> for metricflow
  # dbt_dq_tool_start_date
  # dbt_dq_tool_end_date

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  dbt_snowflake_pov:
    # Config indicated by + and applies to all files under models/example/
    # example:
    #   +materialized: view
    staging:
      +materialized: table

on-run-start:
  - "{{ create_process_logs(var('step_name')) }}"

on-run-end:
  - "{{ update_process_logs(results, var('step_name')) }}"
